# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mbouizak <mbouizak@student.1337.ma>        +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/09/06 by mbouizak               #+#    #+#             #+#   #
#    Updated: 2025/09/06 by mbouizak              ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# ================================ VARIABLES ================================ #

# Program name
NAME		= cub3D

# Directories
SRC_DIR		= src
BUILD_DIR	= build
INCLUDE_DIR	= include
UTILS_DIR	= $(SRC_DIR)/utils
PARSING_DIR	= $(SRC_DIR)/parsing
MAP_DIR		= $(SRC_DIR)/map
DATA_DIR	= $(SRC_DIR)/data

# Compiler and flags
CC			= gcc
CFLAGS		= -Wall -Wextra -Werror
INCLUDES	= -I$(INCLUDE_DIR)

# Source files organized by functionality
MAIN_SRCS	= $(SRC_DIR)/main.c

UTILS_SRCS	= $(UTILS_DIR)/file_format.c \
			  $(UTILS_DIR)/utils1.c \
			  $(UTILS_DIR)/clean_up.c

PARSING_SRCS = $(PARSING_DIR)/parse_map.c

MAP_SRCS	= $(MAP_DIR)/get_map.c

DATA_SRCS	= $(DATA_DIR)/walls_map.c

# All source files
SRCS		= $(MAIN_SRCS) $(UTILS_SRCS) $(PARSING_SRCS) $(MAP_SRCS) $(DATA_SRCS)

# Object files (placed in build directory)
OBJS		= $(SRCS:$(SRC_DIR)/%.c=$(BUILD_DIR)/%.o)

# Colors for pretty printing
GREEN		= \033[0;32m
RED			= \033[0;31m
YELLOW		= \033[0;33m
BLUE		= \033[0;34m
RESET		= \033[0m

# ================================ RULES ================================ #

# Default target
all: $(NAME)

# Create the executable
$(NAME): $(OBJS)
	@echo "$(BLUE)Linking $(NAME)...$(RESET)"
	@$(CC) $(CFLAGS) $(OBJS) -o $(NAME)
	@echo "$(GREEN)✓ $(NAME) created successfully!$(RESET)"

# Create object files
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	@echo "$(YELLOW)Compiling $<...$(RESET)"
	@$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Clean object files
clean:
	@echo "$(RED)Removing object files...$(RESET)"
	@rm -rf $(BUILD_DIR)
	@echo "$(GREEN)✓ Clean completed!$(RESET)"

# Clean everything
fclean: clean
	@echo "$(RED)Removing $(NAME)...$(RESET)"
	@rm -f $(NAME)
	@echo "$(GREEN)✓ Full clean completed!$(RESET)"

# Rebuild everything
re: fclean all

# Create directory structure
setup:
	@echo "$(BLUE)Setting up directory structure...$(RESET)"
	@mkdir -p $(SRC_DIR) $(BUILD_DIR) $(INCLUDE_DIR)
	@mkdir -p $(UTILS_DIR) $(PARSING_DIR) $(MAP_DIR) $(DATA_DIR)
	@echo "$(GREEN)✓ Directory structure created!$(RESET)"

# Show project structure
tree:
	@echo "$(BLUE)Project Structure:$(RESET)"
	@tree -I 'build|*.o|*.a' || ls -la

# Help
help:
	@echo "$(BLUE)Available targets:$(RESET)"
	@echo "  $(GREEN)all$(RESET)     - Build the project"
	@echo "  $(GREEN)clean$(RESET)   - Remove object files"
	@echo "  $(GREEN)fclean$(RESET)  - Remove all generated files"
	@echo "  $(GREEN)re$(RESET)      - Rebuild everything"
	@echo "  $(GREEN)setup$(RESET)   - Create directory structure"
	@echo "  $(GREEN)tree$(RESET)    - Show project structure"
	@echo "  $(GREEN)help$(RESET)    - Show this help"

# Debug info
debug:
	@echo "$(BLUE)Debug Information:$(RESET)"
	@echo "NAME: $(NAME)"
	@echo "SRCS: $(SRCS)"
	@echo "OBJS: $(OBJS)"
	@echo "CC: $(CC)"
	@echo "CFLAGS: $(CFLAGS)"

.PHONY: all clean fclean re setup tree help debug
